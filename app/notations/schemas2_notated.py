# We have some new classes below to handle the input and response of creating user accounts. As always we pass BaseModel from 
# pydantic. Basically we want the user to give us an email and password that we will store in a new table called 'users' and we want 
# to return them their newly created id (integer), email, and time of account creation. Note these are columns in our 'users' table
# but 'id' and 'created_at' do not require user input and are automatically generated by our database.

# We also have a new string type: 'EmailStr' imported from pydantic. This is a validator that will make sure the email provided by the
# user is a valid email address. We also included the same code in the UserResponse class as we did in the Post class to help pydantic
# interpret dictionary values.

from datetime import datetime
from pydantic import BaseModel, EmailStr


# PostBase class with pydantic library schema BaseModel
class PostBase(BaseModel):
    title: str
    content: str
    published: bool = True

class PostCreate(PostBase):
    pass

class Post(PostBase):
    id: int
    created_at: datetime

    class Config:
        orm_mode=True

class UserCreate(BaseModel):
    email: EmailStr
    password: str

class UserResponse(BaseModel):
    id: int
    email: EmailStr
    created_at: datetime

    class Config:
        orm_mode=True
