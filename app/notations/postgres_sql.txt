# this is just some random SQL notes from our excursion into postgres database manager PG Admin. a lot of this was touched on in the tkinter
# lesson on databases but this is a little more in depth with SQL syntax. All this pertains to commands used to view, delete, add,
# create, update table and rows within a database


Notes: capitalization doesn't matter in SQL
commands. Best practice is to 
capitalize SQL commands so the 
reader can quickly tell if the code is
SQL command or user-provided
data.

Change the name of a column in the
Query editor. When calling the table 
use" SELECT name AS product_name"
and henceforth the column previously
know as 'name' will be called 'product_
name'.

Filter your query by specifying a value
in a given column: "SELECT * FROM
products WHERE is_sale = true" will
return only items where is_sale is
true. If you're filtering string type
columns (eg the 'name' column) you
must enclose your WHERE name =
value in double quotes ("example")

Standard operands work in SQL (>, <, =,
!=, etc.). If you want to apply two in a 
single query just connect them with
'AND'. 

'OR' statements also available. 

Use 'IN' to search for a range of values
in a given column, enclose values in
parentheses.
SELECT * FROM products WHERE id IN (1,2,3);

Use 'LIKE' to search for partial strings. 
SELECT * FROM products WHERE name LIKE 'po%';
(must be single quotes 'examp')
You can also add 'NOT LIKE' or enclose
your string value in '%'s 

SELECT * FROM products ORDER by price
sort by price

SELECT * FROM products ORDER by price DESC, inventory
sort by price in descending order (default is ascending),
then sort by inventory (ascending). So two criteria to sort 
by with the first having priority and any ties being ranked by
the second criteria

SELECT * FROM products LIMIT 10;
limit how many rows will be returned, first 10 only

SELECT * FROM products LIMIT 5 OFFSET 2;
offset is going to skip the first two rows in the data
meeting your criteria. notice no comman separating
LIMIT and OFFSET.

INSERT INTO products (name, price, inventory) VALUES ('clock', 25, 16);
this is how we insert rows into our table. 

INSERT INTO products (name, price, inventory) VALUES ('monitor', 175, 42) RETURNING *;
here we inserted a new row and requested the new entry
be returned immediately showing all columns (the * after
RETURNING)
and you can insert multiple rows at once, using a comma
in between each row being inserted's VALUES:
INSERT INTO products (name, price, inventory) VALUES ('monitor', 175, 42),
('phone case', 15, 20) RETURNING *;

DELETE FROM products WHERE id = 6 RETURNING *;
this is how we delete rows by specific criteria. here 
we have postgres return the deleted row to us.

DELETE FROM products WHERE inventory=0 RETURNING name;
this will delete all rows with an inventory value of 0 and
then show you the name of the rows deleted.

UPDATE products SET name = 'flatscreen', price = 225 WHERE id = 14 RETURNING *;
this will update the row with 'id' = 14 and change the 
name column to 'flatscreen' and the price to 225 and 
then return that new entry
