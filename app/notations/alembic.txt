we are now using a program called Alembic which is a database migration tool. You know how if you want to add a column to our existing tables and you go under models.py and try to add to the 'Post' class, postgres won't update the table, so we have to delete/drop the table everytime we want to update its structure? That's what alembic is going to address. It's going to allow us to edit our tables without having to delete the old one and all of it's data and start from scratch.

So we did pip install alembic. then in command prompt we did alembic init, which is the command to start alembic. This prompted some new files/folders to be created in our parent directory (3d objects). There was alembic.ini which directs alembic how to connect to our database (postgres:fastapi). Now by default it asks you to enter that string that displays the postgres user name and password. So we did the same thing we did with connecting sqlalachemy and referred it to our environment variable (.env) file and told it to use that so our secure data wasn't on full display. We had to edit the env.py (which is different that '.env') file in the newly created alembic folder to do this. 

Then, per the sqlalachemy docs on alembic we began the process of creating a new table using the 'alembic revision' command in the command prompt. we tacked on the command '-m "create post table"' which generated a new python file in the newly created alembic/versions directory. This new file had some code prefilled for revising our database items (tables, columns, etc) that will not only make the changes we want but also provide a record of those changes and a record of the previous version of the database. And this is the extra value of alembic. If we ever wanted to return to a previous version of our database, this file and other like it that are created when you make revisions, will allow us to go back and trace the changes we've made. 

Alembic also creates a database that saves 'revision IDs' so you can find older versions of your code from previous alembic revisions. so check out the files in 'alembic\versions' to see how we created tables etc. using alembic code (which imports sqlalchemy).

'cmd: alembic current' = current revision alembic is using (the version of the database active on postgres)
'cmd: alembic heads' = the latest revision not yet executed on the postgres database. alembic won't update the database until you send the command 'alembic upgrade [revision number]' or you can type 'alembic upgrade head', same result.

if you want to downgrade to a previous revision: 'alembic downgrade [down revision number]' and you can count backwards from the current revision like this 'alembic downgrad -1' or -2/3/4 however far back you want to go in the revision files.

This next feature is relly cool. You can have alembic autogenerate a table for you based off your models in models.py. So it will note any missing tables that appear in models.py but don't have a corresponding table on your database, then it will parse out the code from models.py and create a table for you. it's surprisingly accurate. so in command prompt: 

'alembic revision --autogenerate -m "[name your auto generated revision]. 

So this is what really brings together alembic and our database. If you eveer want to add a column to a table, just go into models.py, add the relevant code under your existing model and then run an alembic autogenerate command. It will pick up your changes in models.py and apply the code for your new column in a revision file. You check it for accuracy and then run an 'alembic upgrade head' and bam. you got yourself an updated table.